<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.github/workflows/ci.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.github/workflows/ci.yml" />
              <option name="originalContent" value="name: CI-with-Sonar-and-Artifactory&#10;&#10;on:&#10;  push:&#10;    branches: [ main ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  build:&#10;    runs-on: self-hosted&#10;    env:&#10;      JAVA_TOOL_OPTIONS: &quot;-Dcom.sun.net.ssl.checkRevocation=false&quot;&#10;      JFROG_CLI_INSECURE_TLS: &quot;true&quot;&#10;      JFROG_CLI_LOG_LEVEL: DEBUG&#10;      JFROG_URL: https://evidencetrial.jfrog.io&#10;      ACTIONS_STEP_DEBUG: true&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up JFrog CLI&#10;        uses: jfrog/setup-jfrog-cli@v4&#10;        env:&#10;          JF_URL: ${{ env.JFROG_URL }}&#10;          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}&#10;        with:&#10;          custom-server-id: evidence-prod&#10;          version: 2.78.3&#10;&#10;      - name: Configure Maven and Build&#10;        run: |&#10;          jf mvn-config --repo-deploy-snapshots misha-maven-libs-snapshot-local --repo-deploy-releases misha-maven-libs-release-local --repo-resolve-snapshots misha-maven-maven-remote --repo-resolve-releases misha-maven-maven-remote --server-id-deploy evidence-prod --server-id-resolve evidence-prod&#10;          jf mvn install&#10;&#10;      - name: Upload build artifacts&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: |&#10;            target/&#10;            ~/.jfrog/&#10;&#10;  sonar_scan:&#10;    needs: build&#10;    runs-on: self-hosted&#10;    env:&#10;      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Download build artifacts&#10;        uses: actions/download-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: .&#10;&#10;      - name: SonarQube Scan&#10;        run: |&#10;          /opt/homebrew/Cellar/sonar-scanner/7.2.0.5079/bin/sonar-scanner \&#10;            -Dsonar.organization=misha-sonar \&#10;            -Dsonar.projectKey=misha-sonar_integration \&#10;            -Dsonar.host.url=https://sonarcloud.io \&#10;            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \&#10;            -Dsonar.sources=src \&#10;            -Dsonar.java.binaries=target/classes&#10;&#10;  publish:&#10;    needs: build&#10;    runs-on: self-hosted&#10;    env:&#10;      JFROG_CLI_SIGNING_KEY: /Users/mishas/dev/bash/private.pem&#10;      JFROG_URL: https://evidencetrial.jfrog.io&#10;    steps:&#10;      - name: Set up JFrog CLI&#10;        uses: jfrog/setup-jfrog-cli@v4&#10;        env:&#10;          JF_URL: ${{ env.JFROG_URL }}&#10;          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}&#10;        with:&#10;          custom-server-id: evidence-prod&#10;          version: 2.78.3&#10;&#10;      - name: Download build artifacts&#10;        uses: actions/download-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: .&#10;&#10;      - name: Restore JFrog config&#10;        run: |&#10;          mkdir -p ~/.jfrog&#10;          mv .jfrog/* ~/.jfrog/&#10;&#10;      - name: Publish to Artifactory and Create Evidence&#10;        run: |&#10;          jf rt build-publish CI-with-Sonar-and-Artifactory ${{ github.run_number }}&#10;          jf evd create --build-name CI-with-Sonar-and-Artifactory --build-number ${{ github.run_number }} --use-sonar-predicate --key-alias PUBLIC-MISHA&#10;" />
              <option name="updatedContent" value="name: CI-with-Sonar-and-Artifactory&#10;&#10;on:&#10;  push:&#10;    branches: [ main ]&#10;  pull_request:&#10;    branches: [ main ]&#10;&#10;jobs:&#10;  build:&#10;    runs-on: self-hosted&#10;    env:&#10;      JAVA_TOOL_OPTIONS: &quot;-Dcom.sun.net.ssl.checkRevocation=false&quot;&#10;      JFROG_CLI_INSECURE_TLS: &quot;true&quot;&#10;      JFROG_CLI_LOG_LEVEL: DEBUG&#10;      JFROG_URL: https://evidencetrial.jfrog.io&#10;      ACTIONS_STEP_DEBUG: true&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Set up JFrog CLI&#10;        uses: jfrog/setup-jfrog-cli@v4&#10;        env:&#10;          JF_URL: ${{ env.JFROG_URL }}&#10;          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}&#10;        with:&#10;          custom-server-id: evidence-prod&#10;          version: 2.78.3&#10;&#10;      - name: Configure Maven and Build&#10;        run: |&#10;          jf mvn-config --repo-deploy-snapshots misha-maven-libs-snapshot-local --repo-deploy-releases misha-maven-libs-release-local --repo-resolve-snapshots misha-maven-maven-remote --repo-resolve-releases misha-maven-maven-remote --server-id-deploy evidence-prod --server-id-resolve evidence-prod&#10;          jf mvn install&#10;&#10;      - name: Upload build artifacts&#10;        uses: actions/upload-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: |&#10;            target/&#10;            ~/.jfrog/&#10;&#10;  sonar_scan:&#10;    needs: build&#10;    runs-on: self-hosted&#10;    env:&#10;      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}&#10;    steps:&#10;      - name: Checkout code&#10;        uses: actions/checkout@v4&#10;&#10;      - name: Download build artifacts&#10;        uses: actions/download-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: .&#10;&#10;      - name: SonarQube Scan&#10;        run: |&#10;          /opt/homebrew/Cellar/sonar-scanner/7.2.0.5079/bin/sonar-scanner \&#10;            -Dsonar.organization=misha-sonar \&#10;            -Dsonar.projectKey=misha-sonar_integration \&#10;            -Dsonar.host.url=https://sonarcloud.io \&#10;            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \&#10;            -Dsonar.sources=src \&#10;            -Dsonar.java.binaries=target/classes&#10;&#10;  publish:&#10;    needs: build&#10;    runs-on: self-hosted&#10;    env:&#10;      JFROG_CLI_SIGNING_KEY: /Users/mishas/dev/bash/private.pem&#10;      JFROG_URL: https://evidencetrial.jfrog.io&#10;    steps:&#10;      - name: Set up JFrog CLI&#10;        uses: jfrog/setup-jfrog-cli@v4&#10;        env:&#10;          JF_URL: ${{ env.JFROG_URL }}&#10;          JF_ACCESS_TOKEN: ${{ secrets.JFROG_ACCESS_TOKEN }}&#10;        with:&#10;          custom-server-id: evidence-prod&#10;          version: 2.78.3&#10;&#10;      - name: Download build artifacts&#10;        uses: actions/download-artifact@v4&#10;        with:&#10;          name: build-artifacts&#10;          path: .&#10;&#10;      - name: Restore JFrog config&#10;        run: |&#10;          mkdir -p ~/.jfrog&#10;          cp -a .jfrog/* ~/.jfrog/&#10;&#10;      - name: Publish to Artifactory and Create Evidence&#10;        run: |&#10;          jf rt build-publish CI-with-Sonar-and-Artifactory ${{ github.run_number }}&#10;          jf evd create --build-name CI-with-Sonar-and-Artifactory --build-number ${{ github.run_number }} --use-sonar-predicate --key-alias PUBLIC-MISHA" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.example&lt;/groupId&gt;&#10;    &lt;artifactId&gt;hello-world&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;21&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;21&lt;/maven.compiler.target&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.8.1&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/HelloWorld.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/HelloWorld.java" />
              <option name="updatedContent" value="package com.example;&#10;&#10;public class HelloWorld {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello, World!&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>